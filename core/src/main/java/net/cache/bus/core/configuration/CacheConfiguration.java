package net.cache.bus.core.configuration;

import javax.annotation.Nonnegative;
import javax.annotation.Nonnull;
import java.util.Set;

/**
 * Конфигурация распределенного кэша.
 *
 * @author Alik
 */
public interface CacheConfiguration {

    /**
     * Возвращает имя кэша, к которому применяется конфигурация.
     *
     * @return имя кэша, не может быть {@code null}.
     */
    @Nonnull
    String cacheName();

    /**
     * Возвращает тип распределенного кэша.
     *
     * @return тип кэша, не может быть {@code null}.
     * @see CacheType
     */
    @Nonnull
    CacheType cacheType();

    /**
     * Возвращает дополнительные алиасы кэша. Используются при обработке сообщений с других серверов.<br>
     * Алиасы полезны в гетерогенной среде, где возможна коммуникация между разными приложениями
     * (например, в микросервисной среде). Одно приложение может работать с одним кэшем,
     * а другое приложение с другим, но имеющем тот же ключ, и поэтому может быть заинтересовано
     * в изменениях кэша первого приложения.
     *
     * @return опциональные доп. алиасы кэша, не может быть {@code null}.
     * @implSpec Должно поддерживаться только для кэшей инвалидационного типа, т.к. структура хранимого
     * значения может отличаться.
     */
    @Nonnull
    Set<String> cacheAliases();

    /**
     * Возвращает признак использования сравнения изменений элементов в кэше на основе меток времени
     * при применении событий с удаленных версий кэша.<br>
     * Данная настройка подразумевает ведение меток времени для ключей кэша (время изменения).
     * Если операция в событии с удаленного кэша была выполнена раньше, чем произошло изменение
     * значения ключа на локальном (текущем) сервере, то событие не будет применено к локальному кэшу.<br>
     * Следует учитывать, что использование данного режима для кэша влечет за собой накладные расходы в виде
     * дополнительного хранения метки времени для каждого ключа.
     * <br> Кроме того, должна быть обеспечена синхронизация времени между серверами.
     *
     * @return признак использования меток времени для определения необходимости применения удаленных
     * изменений к локальному кэшу, {@code true}, если метки используются, {@code false} в противном случае.
     */
    boolean useStampBasedComparison();

    /**
     * Возвращает предполагаемое вероятное количество элементов в кэше (в среднем).<br>
     * Чем точнее задано значение, тем более эффективно будет работать обработка временных меток
     * для элементов кэша при использовании сравнений изменений элементов кэша на локальном и
     * удаленных серверах.
     *
     * @return вероятное количество элементов в кэше, не может быть отрицательным;
     * если {@code useStampBasedComparison() == false}, то значение игнорируется.
     */
    @Nonnegative
    int probableAverageElementsCount();
}
